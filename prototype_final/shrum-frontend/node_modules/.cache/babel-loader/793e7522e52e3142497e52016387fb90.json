{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/TestShrum/prototype_final/shrum-frontend/src/views/BoardView.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\"; //import BoardComponent from \"../components/BoardComponent\";\n\nimport Board from 'react-trello';\n/**\n * For register new users\n * @param {props} props\n */\n//  class NewCardForm extends Component {\n//   handleAdd = () => this.props.onAdd({title: this.titleRef.value, description: this.descRef.value, label: this.label.value, assignee: this.assignee.value, priority: this.priority.value, reviewer: this.reviewer.value})\n//   setTitleRef = (ref) => this.titleRef = ref\n//   setDescRef = (ref) => this.descRef = ref\n//   setLabelRef = (ref) => this.label = ref\n//   setAssigneeRef = (ref) => this.assignee = ref\n//   setPriorityRef =(ref) => this.priority = ref\n//   setReviewerRef = (ref) => this.reviewer = ref\n//   render() {\n//   const {onCancel} = this.props\n//   return (\n//    <div style={{background: 'white', borderRadius: 3, border: '1px solid #eee', borderBottom: '1px solid #ccc'}}>\n//     <div style={{padding: 5, margin: 5}}>\n//       <div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setTitleRef} placeholder=\"User\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setDescRef} placeholder=\"Task Description\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setLabelRef} placeholder=\"points\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setAssigneeRef} placeholder=\"assignee\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setPriorityRef} placeholder=\"priority\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setReviewerRef} placeholder=\"reviewer\" />\n//         </div>\n//       </div>\n//       <button onClick={this.handleAdd}>Add</button>\n//       <button onClick={onCancel}>Cancel</button>\n//     </div>\n//   </div>\n//     ) \n//   }\n// }\n\nfunction BoardView() {\n  _s();\n\n  const data = {\n    lanes: [{\n      id: 'lane1',\n      title: 'To Do',\n      cards: [{\n        id: 'Card1',\n        title: 'Assignment 1',\n        description: 'Deadline: Sunday, May 2nd.',\n        assignee: 'None',\n        priority: 'low ❗',\n        reviewer: 'None',\n        label: '3 Points',\n        draggable: true\n      }, {\n        id: 'Card2',\n        title: 'Assignment 2',\n        description: 'Deadline: Sunday, May 16th.',\n        assignee: 'None',\n        priority: 'low ❗',\n        reviewer: 'None',\n        label: '5 Points',\n        metadata: {\n          sha: 'be312a1'\n        }\n      }, {\n        id: 'Card3',\n        title: 'Assignment 3',\n        description: 'Deadline: Sunday, July 25th.',\n        assignee: 'None',\n        priority: 'high ❗❗',\n        reviewer: 'None',\n        label: '8 Points',\n        metadata: {\n          sha: 'be312a1'\n        }\n      }, {\n        id: 'Card4',\n        title: 'Final Exam',\n        description: 'Deadline: Friday, Augusr 6th.',\n        assignee: 'None',\n        priority: 'high ❗❗',\n        reviewer: 'None',\n        label: '8 Points',\n        metadata: {\n          sha: 'be312a1'\n        }\n      }]\n    }, {\n      id: 'lane2',\n      title: 'In Progress',\n      cards: []\n    }, {\n      id: 'lane3',\n      title: 'In Review',\n      cards: []\n    }, {\n      id: 'lane4',\n      title: 'Done',\n      cards: []\n    }]\n  };\n  localStorage.setItem('data', JSON.stringify(data));\n  var retrievedObject = localStorage.getItem('data');\n  console.log('data: ', JSON.parse(retrievedObject)); //const [retrievedObject, setRetrievedObject] = useState(data);\n\n  const [eventBus, setEventBus] = useState(undefined);\n  useEffect(() => {\n    if (card.length !== 0) {\n      eventBus.publish({\n        type: 'ADD_CARD',\n        laneId: card.column_id,\n        cards: {\n          id: card.id,\n          title: card.title,\n          label: \"1 sec\",\n          description: card.description\n        }\n      });\n    }\n  }, [card.length]);\n  return (\n    /*#__PURE__*/\n    // <Board style = {{backgroundColor: 'grey'}}\n    // editable\n    //  onDataChange={(newData) => {console.log(newData)}}\n    //  onCardAdd={(card) => {localStorage.setItem('data', JSON.stringify(card));\n    //                    var retrievedObject = localStorage.getItem('data');\n    //                    console.log(retrievedObject)}}\n    //                    cardDraggable\n    //                    draggable\n    //                    data={JSON.parse(retrievedObject)}\n    //                    collapsibleLanes\n    //                    //components={{NewCardForm: NewCardForm}} \n    //                    />\n    _jsxDEV(Board, {\n      id: \"board1\",\n      components: components,\n      style: {\n        background: '#F1F2F4'\n      },\n      data: JSON.parse(retrievedObject),\n      draggable: true,\n      handleLaneDragStart: handleLaneDragStart,\n      handleLaneDragEnd: handleLaneDragEnd,\n      canAddLanes: true,\n      onLaneAdd: onLaneAdd,\n      onLaneDelete: onLaneDelete,\n      handleDragEnd: handleDragEnd,\n      onCardDelete: onCardDelete,\n      onCardAdd: onCardAdd,\n      editable: true,\n      eventBusHandle: setEventBus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }, this)\n  );\n}\n\n_s(BoardView, \"WTmNtigSF1Gh4cDf+V5MI3r+xf4=\");\n\n_c = BoardView;\nexport default connect()(withRouter(BoardView));\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/TestShrum/prototype_final/shrum-frontend/src/views/BoardView.js"],"names":["React","Component","useState","useEffect","withRouter","connect","useSelector","Board","BoardView","data","lanes","id","title","cards","description","assignee","priority","reviewer","label","draggable","metadata","sha","localStorage","setItem","JSON","stringify","retrievedObject","getItem","console","log","parse","eventBus","setEventBus","undefined","card","length","publish","type","laneId","column_id","components","background","handleLaneDragStart","handleLaneDragEnd","onLaneAdd","onLaneDelete","handleDragEnd","onCardDelete","onCardAdd"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { connect, useSelector } from \"react-redux\";\n\n\n//import BoardComponent from \"../components/BoardComponent\";\nimport Board from 'react-trello'\n\n\n/**\n * For register new users\n * @param {props} props\n */\n\n//  class NewCardForm extends Component {\n//   handleAdd = () => this.props.onAdd({title: this.titleRef.value, description: this.descRef.value, label: this.label.value, assignee: this.assignee.value, priority: this.priority.value, reviewer: this.reviewer.value})\n//   setTitleRef = (ref) => this.titleRef = ref\n//   setDescRef = (ref) => this.descRef = ref\n//   setLabelRef = (ref) => this.label = ref\n//   setAssigneeRef = (ref) => this.assignee = ref\n//   setPriorityRef =(ref) => this.priority = ref\n//   setReviewerRef = (ref) => this.reviewer = ref\n//   render() {\n//   const {onCancel} = this.props\n//   return (\n//    <div style={{background: 'white', borderRadius: 3, border: '1px solid #eee', borderBottom: '1px solid #ccc'}}>\n//     <div style={{padding: 5, margin: 5}}>\n//       <div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setTitleRef} placeholder=\"User\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setDescRef} placeholder=\"Task Description\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setLabelRef} placeholder=\"points\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setAssigneeRef} placeholder=\"assignee\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setPriorityRef} placeholder=\"priority\" />\n//         </div>\n//         <div style={{marginBottom: 5}}>\n//           <input type=\"text\" ref={this.setReviewerRef} placeholder=\"reviewer\" />\n//         </div>\n//       </div>\n//       <button onClick={this.handleAdd}>Add</button>\n//       <button onClick={onCancel}>Cancel</button>\n//     </div>\n//   </div>\n//     ) \n//   }\n// }\n\n\n\nfunction BoardView() {\n  \n    const data = {\n      lanes: [\n      {\n        id: 'lane1',\n        title: 'To Do',\n        cards: [\n          {id: 'Card1', title: 'Assignment 1', description: 'Deadline: Sunday, May 2nd.',assignee: 'None', priority:'low ❗', reviewer: 'None', label: '3 Points', draggable: true},\n          {id: 'Card2', title: 'Assignment 2', description: 'Deadline: Sunday, May 16th.', assignee: 'None', priority:'low ❗', reviewer: 'None',  label: '5 Points', metadata: {sha: 'be312a1'}},\n          {id: 'Card3', title: 'Assignment 3', description: 'Deadline: Sunday, July 25th.', assignee: 'None', priority:'high ❗❗', reviewer: 'None', label: '8 Points', metadata: {sha: 'be312a1'}},\n          {id: 'Card4', title: 'Final Exam', description: 'Deadline: Friday, Augusr 6th.',  assignee: 'None', priority:'high ❗❗', reviewer: 'None', label: '8 Points', metadata: {sha: 'be312a1'}}\n        ]\n      },\n      {\n        id: 'lane2',\n        title: 'In Progress',\n        cards: []\n     \n      },\n      {\n        id: 'lane3',\n        title: 'In Review',\n        cards: []\n       \n      },\n      {\n        id: 'lane4',\n        title: 'Done',\n        cards: []\n      \n      }\n    ]\n  };\n\n\n  localStorage.setItem('data', JSON.stringify(data));\n  var retrievedObject = localStorage.getItem('data');\n  console.log('data: ', JSON.parse(retrievedObject));\n\n  //const [retrievedObject, setRetrievedObject] = useState(data);\n   \n    const [eventBus, setEventBus] = useState(undefined);\n    \n    useEffect(() => {\n            if (card.length !== 0) {\n                eventBus.publish({type: 'ADD_CARD', laneId:card.column_id, cards: {id: card.id, title: card.title, label: \"1 sec\", description: card.description}});\n            }\n        }, [card.length]);\n\n\n    return (\n      // <Board style = {{backgroundColor: 'grey'}}\n      // editable\n      //  onDataChange={(newData) => {console.log(newData)}}\n      //  onCardAdd={(card) => {localStorage.setItem('data', JSON.stringify(card));\n      //                    var retrievedObject = localStorage.getItem('data');\n      //                    console.log(retrievedObject)}}\n      //                    cardDraggable\n      //                    draggable\n      //                    data={JSON.parse(retrievedObject)}\n      //                    collapsibleLanes\n      //                    //components={{NewCardForm: NewCardForm}} \n      //                    />\n              <Board\n              id=\"board1\"\n              components={components}\n              style={{\n                  background: '#F1F2F4'\n              }}\n              data={JSON.parse(retrievedObject)}\n              draggable\n              handleLaneDragStart={handleLaneDragStart}\n              handleLaneDragEnd={handleLaneDragEnd}\n              canAddLanes\n              onLaneAdd={onLaneAdd}\n              onLaneDelete={onLaneDelete}\n              handleDragEnd={handleDragEnd}\n              onCardDelete={onCardDelete}\n              onCardAdd={onCardAdd}\n              editable\n              eventBusHandle={setEventBus}\n              />                \n                         \n                         \n    );\n\n\n   \n  \n}\n\nexport default connect()(withRouter(BoardView));\n"]},"metadata":{},"sourceType":"module"}