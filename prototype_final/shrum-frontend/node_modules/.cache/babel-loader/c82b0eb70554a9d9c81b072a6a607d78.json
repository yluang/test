{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/views/TaskBoardView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\nimport { getProject, getTasks } from \"../redux/actions\";\nimport Loading from \"../components/Loading\";\nimport KanbanBoard from \"../components/KanbanBoard\";\n\nfunction TaskBoardView(props) {\n  _s();\n\n  const user = useSelector(state => state.user);\n  const project = useSelector(state => state.currentProject);\n  const tasks = useSelector(state => state.tasks);\n  useEffect(() => {\n    // Force login page if current user is not logged in\n    if (!user.user) {\n      props.history.push(\"/login\");\n    } // load project when the page is loaded\n\n\n    if (!project.project) {\n      // Redux get project action\n      props.dispatch(getProject());\n    }\n  });\n  useEffect(() => {\n    if (project.error) {\n      props.history.push(\"/project\");\n    }\n\n    if (project.project) {\n      props.dispatch(getTasks());\n    }\n  }, [project]);\n  return !tasks ?\n  /*#__PURE__*/\n  // Display loading component during task loading\n  _jsxDEV(KanbanBoard, {\n    tasks: tasks,\n    user: user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this) : !Array.isArray(tasks) ?\n  /*#__PURE__*/\n  // If something loaded, but it is not an array, an error must have occured\n  _jsxDEV(\"div\", {\n    children: \"Task Loading Error!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this) :\n  /*#__PURE__*/\n  // Display Kanban Board if everything worked fine\n  _jsxDEV(KanbanBoard, {\n    tasks: tasks,\n    user: user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n/*\nAlternative mapping (instead of useSelector)\n\nconst mapStateToProps = (state) => ({\n    user: state.user,\n    project: state.currentProject\n})\n*/\n\n\n_s(TaskBoardView, \"D6mLUcO/X7eslsaI+DSjnN691XA=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = TaskBoardView;\nexport default connect()(withRouter(TaskBoardView)); //export default connect(mapStateToProps)(withRouter(TaskBoardView));\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBoardView\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/views/TaskBoardView.js"],"names":["React","useEffect","withRouter","connect","useSelector","getProject","getTasks","Loading","KanbanBoard","TaskBoardView","props","user","state","project","currentProject","tasks","history","push","dispatch","error","Array","isArray"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AAEA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,kBAArC;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAE1B,QAAMC,IAAI,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,OAAO,GAAGT,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACE,cAAlB,CAA3B;AACA,QAAMC,KAAK,GAAGX,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACG,KAAlB,CAAzB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAG,CAACU,IAAI,CAACA,IAAT,EAAc;AACVD,MAAAA,KAAK,CAACM,OAAN,CAAcC,IAAd,CAAmB,QAAnB;AACH,KAJW,CAMZ;;;AACA,QAAI,CAACJ,OAAO,CAACA,OAAb,EAAsB;AAClB;AACAH,MAAAA,KAAK,CAACQ,QAAN,CAAeb,UAAU,EAAzB;AACH;AAEJ,GAZQ,CAAT;AAcAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,OAAO,CAACM,KAAZ,EAAmB;AACfT,MAAAA,KAAK,CAACM,OAAN,CAAcC,IAAd,CAAmB,UAAnB;AACH;;AAED,QAAIJ,OAAO,CAACA,OAAZ,EAAqB;AACjBH,MAAAA,KAAK,CAACQ,QAAN,CAAeZ,QAAQ,EAAvB;AACH;AAEJ,GATQ,EASN,CAACO,OAAD,CATM,CAAT;AAWA,SAAO,CAACE,KAAD;AAAA;AACH;AACA,UAAC,WAAD;AACI,IAAA,KAAK,EAAEA,KADX;AAEI,IAAA,IAAI,EAAEJ;AAFV;AAAA;AAAA;AAAA;AAAA,UAFG,GAMH,CAACS,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAD;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA;AAAA;AAIA;AACA,UAAC,WAAD;AACI,IAAA,KAAK,EAAEA,KADX;AAEI,IAAA,IAAI,EAAEJ;AAFV;AAAA;AAAA;AAAA;AAAA,UAXJ;AAgBH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAxDSF,a;UAEQL,W,EACGA,W,EACFA,W;;;KAJTK,a;AA0DT,eAAeN,OAAO,GAAGD,UAAU,CAACO,aAAD,CAAb,CAAtB,C,CACA","sourcesContent":["import React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\n\nimport { getProject, getTasks } from \"../redux/actions\";\n\nimport Loading from \"../components/Loading\";\n\nimport KanbanBoard from \"../components/KanbanBoard\";\n\nfunction TaskBoardView(props) {\n\n    const user = useSelector((state) => state.user);      \n    const project = useSelector((state) => state.currentProject);\n    const tasks = useSelector((state) => state.tasks);\n    \n    useEffect(() => {\n        // Force login page if current user is not logged in\n        if(!user.user){\n            props.history.push(\"/login\");\n        }\n\n        // load project when the page is loaded\n        if (!project.project) {\n            // Redux get project action\n            props.dispatch(getProject());\n        }\n\n    });\n\n    useEffect(() => {\n        if (project.error) {\n            props.history.push(\"/project\");\n        }\n\n        if (project.project) {\n            props.dispatch(getTasks());\n        }\n\n    }, [project]);\n\n    return !tasks ? (\n        // Display loading component during task loading\n        <KanbanBoard\n            tasks={tasks}\n            user={user}\n            />\n    ) : !Array.isArray(tasks) ? (\n        // If something loaded, but it is not an array, an error must have occured\n        <div>Task Loading Error!</div>\n    ) : (\n        // Display Kanban Board if everything worked fine\n        <KanbanBoard\n            tasks={tasks}\n            user={user}\n            />\n    );\n}\n\n/*\nAlternative mapping (instead of useSelector)\n\nconst mapStateToProps = (state) => ({\n    user: state.user,\n    project: state.currentProject\n})\n*/\n\nexport default connect()(withRouter(TaskBoardView));\n//export default connect(mapStateToProps)(withRouter(TaskBoardView));"]},"metadata":{},"sourceType":"module"}