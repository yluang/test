{"ast":null,"code":"const getUser = () => {\n  if (window.localStorage[\"jwtToken\"]) {\n    let token = window.localStorage[\"jwtToken\"];\n    let base64Url = token.split(\".\")[1];\n    let base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n    let userJson = JSON.parse(window.atob(base64)); // if token is expired delete it and return {}\n    // --> User is not logged in anymore.\n\n    if (userJson.exp > Date.now()) {\n      window.localStorage.removeItem(\"jwtToken\");\n      return {};\n    }\n\n    return {\n      user: {\n        _id: userJson._id,\n        username: userJson.username,\n        role: userJson.role\n      }\n    };\n  }\n\n  return {};\n};\n\nexport default function user(state = getUser(), action) {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      return {\n        user: action.user\n      };\n\n    case \"LOGIN_FAILURE\":\n      return {\n        error: \"Password or username incorrect.\"\n      };\n\n    case \"LOGIN_RESET\":\n      return {};\n\n    case \"LOGOUT\":\n      return {};\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum_new/prototype/shrum/src/redux/reducers/userReducer.js"],"names":["getUser","window","localStorage","token","base64Url","split","base64","replace","userJson","JSON","parse","atob","exp","Date","now","removeItem","user","_id","username","role","state","action","type","error"],"mappings":"AAAA,MAAMA,OAAO,GAAG,MAAM;AAClB,MAAIC,MAAM,CAACC,YAAP,CAAoB,UAApB,CAAJ,EAAqC;AACjC,QAAIC,KAAK,GAAGF,MAAM,CAACC,YAAP,CAAoB,UAApB,CAAZ;AACA,QAAIE,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAhB;AACA,QAAIC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,EAA4BA,OAA5B,CAAoC,GAApC,EAAyC,GAAzC,CAAb;AACA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWT,MAAM,CAACU,IAAP,CAAYL,MAAZ,CAAX,CAAf,CAJiC,CAKjC;AACA;;AACA,QAAIE,QAAQ,CAACI,GAAT,GAAeC,IAAI,CAACC,GAAL,EAAnB,EAA+B;AAC3Bb,MAAAA,MAAM,CAACC,YAAP,CAAoBa,UAApB,CAA+B,UAA/B;AACA,aAAO,EAAP;AACH;;AACD,WAAO;AACHC,MAAAA,IAAI,EAAE;AACFC,QAAAA,GAAG,EAAET,QAAQ,CAACS,GADZ;AAEFC,QAAAA,QAAQ,EAAEV,QAAQ,CAACU,QAFjB;AAGFC,QAAAA,IAAI,EAAEX,QAAQ,CAACW;AAHb;AADH,KAAP;AAOH;;AACD,SAAO,EAAP;AACH,CArBD;;AAuBA,eAAe,SAASH,IAAT,CAAcI,KAAK,GAAGpB,OAAO,EAA7B,EAAiCqB,MAAjC,EAAyC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAO;AAAEN,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAAf,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAP;;AACJ,SAAK,aAAL;AACI,aAAO,EAAP;;AACJ,SAAK,QAAL;AACI,aAAO,EAAP;;AACJ;AACI,aAAOH,KAAP;AAVR;AAYH","sourcesContent":["const getUser = () => {\n    if (window.localStorage[\"jwtToken\"]) {\n        let token = window.localStorage[\"jwtToken\"];\n        let base64Url = token.split(\".\")[1];\n        let base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n        let userJson = JSON.parse(window.atob(base64));\n        // if token is expired delete it and return {}\n        // --> User is not logged in anymore.\n        if (userJson.exp > Date.now()) {\n            window.localStorage.removeItem(\"jwtToken\");\n            return {};\n        }\n        return {\n            user: {\n                _id: userJson._id,\n                username: userJson.username,\n                role: userJson.role,\n            },\n        };\n    }\n    return {};\n};\n\nexport default function user(state = getUser(), action) {\n    switch (action.type) {\n        case \"LOGIN_SUCCESS\":\n            return { user: action.user };\n        case \"LOGIN_FAILURE\":\n            return { error: \"Password or username incorrect.\" };\n        case \"LOGIN_RESET\":\n            return {};\n        case \"LOGOUT\":\n            return {};\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}