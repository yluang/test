{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum_new/prototype/shrum/src/components/TaskListComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Divider, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, TableSortLabel, TablePagination } from \"@material-ui/core\";\nimport TaskListEntry from \"./TaskListEntry\";\nconst useStyles = makeStyles(theme => ({\n  movieListRoot: {\n    padding: theme.spacing(2),\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  movieListHeader: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    maxWidth: \"1000px\"\n  },\n  headerDivider: {\n    margin: theme.spacing(2)\n  },\n  addMovieButton: {\n    margin: theme.spacing(2)\n  },\n  taskListPaper: {\n    width: \"1000px\"\n  },\n  image: {\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: theme.shadows[2]\n  }\n}));\n/**\n * Comparator for two objects on a generic property\n * @param {compare object a} a\n * @param {compare object b} b\n * @param {order by property name} orderBy\n * @returns 1 when b > a, -1 when a < b\n */\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Get comparator for sorting table\n * @param {asc or desc} order\n * @param {order by propoerty name} orderBy\n * @returns function that compares two objects\n */\n\n\nfunction getComparator(order, orderBy) {\n  return order === \"desc\" ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n/**\n * Sort array with respect to the initial order of the objects\n * @param {to sort array} array\n * @param {comparator for sorting} comparator\n * @returns sorted array\n */\n\n\nfunction stableSort(array, comparator) {\n  // include index into the to sortable array objects\n  const stabilizedThis = array.map((el, index) => [el, index]); // sort the array\n\n  stabilizedThis.sort((a, b) => {\n    // compare two array objects a[0] or b[0] refer to the original element of the list a[1] or b[1] would be the initial index\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order; // if both objects have the same property value in the order by property, their initial order in the array is maintained\n\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nfunction TaskListComponent(props) {\n  _s();\n\n  const classes = useStyles();\n  const [orderBy, setOrderBy] = React.useState();\n  const [order, setOrder] = React.useState();\n\n  const onRequestSort = (cellId, event) => {\n    // if the current orderBy is also the clicked property then the direction of the sorting should be changed\n    // otherwise the fist order direction is always ascending\n    const isAsc = orderBy === cellId && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\"); // setting the called cell id as order by\n\n    setOrderBy(cellId);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Shrum Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.taskListPaper,\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                width: \"20%\",\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"left\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: props.tasks.map((task, index) => {\n              return /*#__PURE__*/_jsxDEV(TaskListEntry, {\n                task: task,\n                onClickDisplayTask: props.onClickDisplayTask\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TaskListComponent, \"v1J3xqAcrlCW7RCeXCKKlCg1668=\", false, function () {\n  return [useStyles];\n});\n\n_c = TaskListComponent;\nexport default TaskListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskListComponent\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum_new/prototype/shrum/src/components/TaskListComponent.js"],"names":["React","useEffect","makeStyles","Button","Divider","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","TableSortLabel","TablePagination","TaskListEntry","useStyles","theme","movieListRoot","padding","spacing","flex","display","flexDirection","alignItems","movieListHeader","justifyContent","paddingTop","paddingBottom","maxWidth","headerDivider","margin","addMovieButton","taskListPaper","width","image","borderRadius","shape","boxShadow","shadows","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","TaskListComponent","props","classes","setOrderBy","useState","setOrder","onRequestSort","cellId","event","isAsc","tasks","task","onClickDisplayTask"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n    Button,\n    Divider,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n    TableSortLabel,\n    TablePagination,\n} from \"@material-ui/core\";\n\nimport TaskListEntry from \"./TaskListEntry\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    movieListRoot: {\n        padding: theme.spacing(2),\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    movieListHeader: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        maxWidth: \"1000px\",\n    },\n    headerDivider: {\n        margin: theme.spacing(2),\n    },\n    addMovieButton: {\n        margin: theme.spacing(2),\n    },\n    taskListPaper: {\n        width: \"1000px\",\n    },\n    image: {\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[2],\n    },\n}));\n\n\n/**\n * Comparator for two objects on a generic property\n * @param {compare object a} a\n * @param {compare object b} b\n * @param {order by property name} orderBy\n * @returns 1 when b > a, -1 when a < b\n */\n function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\n/**\n * Get comparator for sorting table\n * @param {asc or desc} order\n * @param {order by propoerty name} orderBy\n * @returns function that compares two objects\n */\nfunction getComparator(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n/**\n * Sort array with respect to the initial order of the objects\n * @param {to sort array} array\n * @param {comparator for sorting} comparator\n * @returns sorted array\n */\nfunction stableSort(array, comparator) {\n    // include index into the to sortable array objects\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    // sort the array\n    stabilizedThis.sort((a, b) => {\n        // compare two array objects a[0] or b[0] refer to the original element of the list a[1] or b[1] would be the initial index\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        // if both objects have the same property value in the order by property, their initial order in the array is maintained\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n\n\nfunction TaskListComponent(props) {\n    const classes = useStyles();\n\n    const [orderBy, setOrderBy] = React.useState();\n    const [order, setOrder] = React.useState();\n\n    const onRequestSort = (cellId, event) => {\n        // if the current orderBy is also the clicked property then the direction of the sorting should be changed\n        // otherwise the fist order direction is always ascending\n        const isAsc = orderBy === cellId && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n\n        // setting the called cell id as order by\n        setOrderBy(cellId);\n    };\n\n    return (\n        <div>\n            <h2>Shrum Task List</h2>\n            <Paper className={classes.taskListPaper}>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell width=\"20%\">Title</TableCell>\n                                <TableCell align=\"left\">Description</TableCell>\n                                { /*sortableHeadCells.map((headCell, index) => (\n                                    <SortableTableHeadCell\n                                        key={index}\n                                        order={order}\n                                        orderBy={orderBy}\n                                        headCell={headCell}\n                                        onRequestSort={() =>\n                                            onRequestSort(headCell.id)\n                                        }\n                                        width={headCell.width}\n                                    />\n                                ))}\n                                {/*\n                                props.isAdmin ? (\n                                    <TableCell align=\"center\">Delete</TableCell>\n                                ) : null\n                                */}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {props.tasks\n                                .map((task, index) => {\n                                    return (\n                                        <TaskListEntry\n                                            key={index}\n                                            task={task}\n                                            onClickDisplayTask={\n                                                props.onClickDisplayTask\n                                            }\n                                            \n                                        />\n                                    );\n                                })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Paper>\n        </div> \n    ); \n}\n\nexport default TaskListComponent;"]},"metadata":{},"sourceType":"module"}