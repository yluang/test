{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/views/MovieDetailsView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { getMovie, changeMovie, addMovie } from \"../redux/actions\";\nimport MovieDetailsComponent from \"../components/MovieDetailsComponent\";\nimport Loading from \"../components/Loading\";\n/**\n * Manages the process of getting movie details data\n * @param {props} props\n */\n\nfunction MovieDetailsView(props) {\n  _s();\n\n  // props can be deconstructed into single variables, so you do not need to write \"props.\" all the time\n  let {\n    match,\n    getMovie\n  } = props; // from redux store\n\n  const selectedMovie = useSelector(state => state.selectedMovie);\n  const user = useSelector(state => state.user); // state variable of this functional component\n\n  const [newMovie, setNewMovie] = React.useState(false);\n  useEffect(() => {\n    // get id of movie from URL\n    let movieId = match.params.id; // check if a new movie is created\n\n    if (movieId === \"new\") {\n      // procedd with an empty element\n      setNewMovie(true);\n    } else {\n      // trigger movie load from backend\n      getMovie(movieId);\n    }\n  }, [match.params]); // for saving an existing movie\n\n  const onSave = movie => {\n    props.changeMovie(movie);\n  }; // for creating a new movie\n\n\n  const onCreate = movie => {\n    // trigger redux action add movie\n    props.addMovie(movie); // navigate back to the movie list\n\n    props.history.push(\"/\");\n  };\n\n  return !selectedMovie.movie && !selectedMovie.error && !newMovie ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this) : selectedMovie.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this) : selectedMovie.movie ? /*#__PURE__*/_jsxDEV(MovieDetailsComponent, {\n    movie: selectedMovie.movie,\n    onSave: onSave,\n    isLoggedIn: !!user.user,\n    isAdmin: !!user.user ? user.user.role === \"admin\" : false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this) : newMovie ? /*#__PURE__*/_jsxDEV(MovieDetailsComponent, {\n    new: true,\n    onCreate: onCreate,\n    isLoggedIn: !!user.user,\n    isAdmin: !!user.user ? user.user.role === \"admin\" : false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this) : null;\n} // connect() establishes allows the usage of redux functionality\n// here the function getMovie, changeMovie and addMovie are mentionend\n// this is an alternative way of calling connecting them with redux\n// another way is shown in MovieListView.js\n\n\n_s(MovieDetailsView, \"EAeGicNgSt9lh+laHNL50TF4XIE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = MovieDetailsView;\nexport default connect(null, {\n  getMovie,\n  changeMovie,\n  addMovie\n})(MovieDetailsView);\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetailsView\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/views/MovieDetailsView.js"],"names":["React","useEffect","connect","useSelector","getMovie","changeMovie","addMovie","MovieDetailsComponent","Loading","MovieDetailsView","props","match","selectedMovie","state","user","newMovie","setNewMovie","useState","movieId","params","id","onSave","movie","onCreate","history","push","error","role"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\n\nimport { getMovie, changeMovie, addMovie } from \"../redux/actions\";\nimport MovieDetailsComponent from \"../components/MovieDetailsComponent\";\nimport Loading from \"../components/Loading\";\n\n/**\n * Manages the process of getting movie details data\n * @param {props} props\n */\nfunction MovieDetailsView(props) {\n    // props can be deconstructed into single variables, so you do not need to write \"props.\" all the time\n    let { match, getMovie } = props;\n\n    // from redux store\n    const selectedMovie = useSelector((state) => state.selectedMovie);\n    const user = useSelector((state) => state.user);\n\n    // state variable of this functional component\n    const [newMovie, setNewMovie] = React.useState(false);\n\n    useEffect(() => {\n        // get id of movie from URL\n        let movieId = match.params.id;\n\n        // check if a new movie is created\n        if (movieId === \"new\") {\n            // procedd with an empty element\n            setNewMovie(true);\n        } else {\n            // trigger movie load from backend\n            getMovie(movieId);\n        }\n    }, [match.params]);\n\n    // for saving an existing movie\n    const onSave = (movie) => {\n        props.changeMovie(movie);\n    };\n\n    // for creating a new movie\n    const onCreate = (movie) => {\n        // trigger redux action add movie\n        props.addMovie(movie);\n        // navigate back to the movie list\n        props.history.push(\"/\");\n    };\n\n    return !selectedMovie.movie && !selectedMovie.error && !newMovie ? (\n        <Loading />\n    ) : selectedMovie.error ? (\n        <div>error</div>\n    ) : selectedMovie.movie ? (\n        <MovieDetailsComponent\n            movie={selectedMovie.movie}\n            onSave={onSave}\n            isLoggedIn={!!user.user}\n            isAdmin={!!user.user ? user.user.role === \"admin\" : false}\n        />\n    ) : newMovie ? (\n        <MovieDetailsComponent\n            new={true}\n            onCreate={onCreate}\n            isLoggedIn={!!user.user}\n            isAdmin={!!user.user ? user.user.role === \"admin\" : false}\n        />\n    ) : null;\n}\n\n// connect() establishes allows the usage of redux functionality\n// here the function getMovie, changeMovie and addMovie are mentionend\n// this is an alternative way of calling connecting them with redux\n// another way is shown in MovieListView.js\nexport default connect(null, { getMovie, changeMovie, addMovie })(\n    MovieDetailsView\n);\n"]},"metadata":{},"sourceType":"module"}