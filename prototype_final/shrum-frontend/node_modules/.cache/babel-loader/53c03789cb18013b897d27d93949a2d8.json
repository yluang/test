{"ast":null,"code":"import ProjectService from \"../../services/ProjectService\";\n/**\n * Redux Action: Create new project\n * @param {object} project : Packed project data, containing at least the project name\n * @returns project action result\n */\n\nexport function createProject(projectData) {\n  function onSuccess(project) {\n    return {\n      type: \"CREATEPROJECT_SUCCESS\",\n      project: project\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"Create new project failure\", error);\n  }\n\n  return async dispatch => {\n    try {\n      // Create project on backend and fetch its full structure\n      // this includes the server-generated project ID\n      let project = await ProjectService.createProject(projectData); // Dispatch state change in redux\n\n      dispatch(onSuccess(project));\n    } catch (e) {\n      // Do not change state when a failure occured\n      onFailure(e);\n    }\n  };\n}\nexport function getProject() {\n  function onSuccess(project) {\n    return {\n      type: \"GETPROJECT_SUCCESS\",\n      project: project\n    };\n  } // when the backend call failed\n\n\n  function onFailure(error) {\n    console.log(\"Error: failed to retrieve project data from server\");\n  }\n\n  return async dispatch => {\n    try {\n      console.log(\"Fetching projects from backend...\");\n      let projects = await ProjectService.getProjects();\n\n      if (projects.length == 1) {\n        dispatch(onSuccess(projects[0]));\n      } else {\n        console.log(\"Project ID required!\");\n      } // ask for the movies in the backend\n      //let project = await ProjectService.getProject();\n      // call onSuccess in context of redux\n      //dispatch(onSuccess(project));\n\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/redux/actions/projectActions.js"],"names":["ProjectService","createProject","projectData","onSuccess","project","type","onFailure","error","console","log","dispatch","e","getProject","projects","getProjects","length"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,+BAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,WAAvB,EAAoC;AACvC,WAASC,SAAT,CAAmBC,OAAnB,EAA4B;AACxB,WAAO;AAAEC,MAAAA,IAAI,EAAE,uBAAR;AAAiCD,MAAAA,OAAO,EAAEA;AAA1C,KAAP;AACH;;AACD,WAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACH;;AAED,SAAO,MAAOG,QAAP,IAAoB;AACvB,QAAI;AACA;AACA;AACA,UAAIN,OAAO,GAAG,MAAMJ,cAAc,CAACC,aAAf,CAA6BC,WAA7B,CAApB,CAHA,CAKA;;AACAQ,MAAAA,QAAQ,CAACP,SAAS,CAACC,OAAD,CAAV,CAAR;AACH,KAPD,CAOE,OAAOO,CAAP,EAAU;AAER;AACAL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GAbD;AAcH;AAED,OAAO,SAASC,UAAT,GAAsB;AAEzB,WAAST,SAAT,CAAmBC,OAAnB,EAA4B;AACxB,WAAO;AAAEC,MAAAA,IAAI,EAAE,oBAAR;AAA8BD,MAAAA,OAAO,EAAEA;AAAvC,KAAP;AACH,GAJwB,CAKzB;;;AACA,WAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACH;;AAED,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AAEA,UAAII,QAAQ,GAAG,MAAMb,cAAc,CAACc,WAAf,EAArB;;AACA,UAAID,QAAQ,CAACE,MAAT,IAAmB,CAAvB,EAA0B;AACtBL,QAAAA,QAAQ,CAACP,SAAS,CAACU,QAAQ,CAAC,CAAD,CAAT,CAAV,CAAR;AACH,OAFD,MAEO;AACHL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,OARD,CAUA;AACA;AACA;AACA;;AACH,KAdD,CAcE,OAAOE,CAAP,EAAU;AACRL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GAlBD;AAmBH","sourcesContent":["import ProjectService from \"../../services/ProjectService\";\n\n/**\n * Redux Action: Create new project\n * @param {object} project : Packed project data, containing at least the project name\n * @returns project action result\n */\nexport function createProject(projectData) {\n    function onSuccess(project) {\n        return { type: \"CREATEPROJECT_SUCCESS\", project: project };\n    }\n    function onFailure(error) {\n        console.log(\"Create new project failure\", error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // Create project on backend and fetch its full structure\n            // this includes the server-generated project ID\n            let project = await ProjectService.createProject(projectData);\n\n            // Dispatch state change in redux\n            dispatch(onSuccess(project));\n        } catch (e) {\n\n            // Do not change state when a failure occured\n            onFailure(e);\n        }\n    };\n}\n\nexport function getProject() {\n\n    function onSuccess(project) {\n        return { type: \"GETPROJECT_SUCCESS\", project: project };\n    }\n    // when the backend call failed\n    function onFailure(error) {\n        console.log(\"Error: failed to retrieve project data from server\");\n    }\n\n    return async (dispatch) => {\n        try {\n            console.log(\"Fetching projects from backend...\");\n\n            let projects = await ProjectService.getProjects();\n            if (projects.length == 1) {\n                dispatch(onSuccess(projects[0]));\n            } else {\n                console.log(\"Project ID required!\");\n            }\n\n            // ask for the movies in the backend\n            //let project = await ProjectService.getProject();\n            // call onSuccess in context of redux\n            //dispatch(onSuccess(project));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\n"]},"metadata":{},"sourceType":"module"}