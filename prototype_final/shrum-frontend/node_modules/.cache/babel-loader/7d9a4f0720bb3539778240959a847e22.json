{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/views/TaskBoardView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { withRouter, useParams } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\nimport { getProject, getTasks } from \"../redux/actions\";\nimport Loading from \"../components/Loading\";\nimport KanbanBoard from \"../components/KanbanBoard\";\n\nfunction TaskBoardView(props) {\n  _s();\n\n  // Project name from URI\n  const {\n    projectSpecifier\n  } = useParams(); // Redux state\n\n  const user = useSelector(state => state.user);\n  const project = useSelector(state => state.currentProject);\n  const tasks = useSelector(state => state.tasks);\n  useEffect(() => {\n    // Force login page if current user is not logged in\n    if (!user.user) {\n      props.history.push(\"/login\");\n    } // load project when the page is loaded\n\n\n    if (!project.project) {\n      // Redux get project action\n      props.dispatch(getProject(projectSpecifier));\n    }\n  });\n  useEffect(() => {\n    if (project.error) {// TODO: Display error to user\n    }\n\n    if (project.project) {\n      props.dispatch(getTasks(projectSpecifier));\n    }\n  }, [project]);\n  return !tasks ?\n  /*#__PURE__*/\n  // Display loading component during task loading\n  _jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this) : !Array.isArray(tasks) ?\n  /*#__PURE__*/\n  // If something loaded, but it is not an array, an error must have occured\n  _jsxDEV(\"div\", {\n    children: \"Task Loading Error!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this) :\n  /*#__PURE__*/\n  // Display Kanban Board if everything worked fine\n  _jsxDEV(KanbanBoard, {\n    tasks: tasks,\n    user: user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n/*\nAlternative mapping (instead of useSelector)\n\nconst mapStateToProps = (state) => ({\n    user: state.user,\n    project: state.currentProject\n})\n*/\n\n\n_s(TaskBoardView, \"nlCsxGNzx8Qs/ZNiLpYdKDkw/Ao=\", false, function () {\n  return [useParams, useSelector, useSelector, useSelector];\n});\n\n_c = TaskBoardView;\nexport default connect()(withRouter(TaskBoardView)); //export default connect(mapStateToProps)(withRouter(TaskBoardView));\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskBoardView\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/views/TaskBoardView.js"],"names":["React","useEffect","withRouter","useParams","connect","useSelector","getProject","getTasks","Loading","KanbanBoard","TaskBoardView","props","projectSpecifier","user","state","project","currentProject","tasks","history","push","dispatch","error","Array","isArray"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AAEA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,kBAArC;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAE1B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAuBT,SAAS,EAAtC,CAH0B,CAK1B;;AACA,QAAMU,IAAI,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,OAAO,GAAGV,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACE,cAAlB,CAA3B;AACA,QAAMC,KAAK,GAAGZ,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACG,KAAlB,CAAzB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAG,CAACY,IAAI,CAACA,IAAT,EAAc;AACVF,MAAAA,KAAK,CAACO,OAAN,CAAcC,IAAd,CAAmB,QAAnB;AACH,KAJW,CAMZ;;;AACA,QAAI,CAACJ,OAAO,CAACA,OAAb,EAAsB;AAClB;AACAJ,MAAAA,KAAK,CAACS,QAAN,CAAed,UAAU,CAACM,gBAAD,CAAzB;AACH;AACJ,GAXQ,CAAT;AAaAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,OAAO,CAACM,KAAZ,EAAmB,CACf;AACH;;AAED,QAAIN,OAAO,CAACA,OAAZ,EAAqB;AACjBJ,MAAAA,KAAK,CAACS,QAAN,CAAeb,QAAQ,CAACK,gBAAD,CAAvB;AACH;AAEJ,GATQ,EASN,CAACG,OAAD,CATM,CAAT;AAWA,SAAO,CAACE,KAAD;AAAA;AACH;AACA,UAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAFG,GAGH,CAACK,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAD;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA;AAAA;AAIA;AACA,UAAC,WAAD;AACI,IAAA,KAAK,EAAEA,KADX;AAEI,IAAA,IAAI,EAAEJ;AAFV;AAAA;AAAA;AAAA;AAAA,UARJ;AAaH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAxDSH,a;UAGwBP,S,EAGhBE,W,EACGA,W,EACFA,W;;;KARTK,a;AA0DT,eAAeN,OAAO,GAAGF,UAAU,CAACQ,aAAD,CAAb,CAAtB,C,CACA","sourcesContent":["import React, { useEffect } from \"react\";\nimport { withRouter, useParams } from \"react-router-dom\";\nimport { connect, useSelector } from \"react-redux\";\n\nimport { getProject, getTasks } from \"../redux/actions\";\n\nimport Loading from \"../components/Loading\";\n\nimport KanbanBoard from \"../components/KanbanBoard\";\n\nfunction TaskBoardView(props) {\n\n    // Project name from URI\n    const { projectSpecifier } = useParams();\n\n    // Redux state\n    const user = useSelector((state) => state.user);      \n    const project = useSelector((state) => state.currentProject);\n    const tasks = useSelector((state) => state.tasks);\n    \n    useEffect(() => {\n        // Force login page if current user is not logged in\n        if(!user.user){\n            props.history.push(\"/login\");\n        }\n\n        // load project when the page is loaded\n        if (!project.project) {\n            // Redux get project action\n            props.dispatch(getProject(projectSpecifier));\n        }\n    });\n\n    useEffect(() => {\n        if (project.error) {\n            // TODO: Display error to user\n        }\n\n        if (project.project) {\n            props.dispatch(getTasks(projectSpecifier));\n        }\n\n    }, [project]);\n\n    return !tasks ? (\n        // Display loading component during task loading\n        <Loading />\n    ) : !Array.isArray(tasks) ? (\n        // If something loaded, but it is not an array, an error must have occured\n        <div>Task Loading Error!</div>\n    ) : (\n        // Display Kanban Board if everything worked fine\n        <KanbanBoard\n            tasks={tasks}\n            user={user}\n            />\n    );\n}\n\n/*\nAlternative mapping (instead of useSelector)\n\nconst mapStateToProps = (state) => ({\n    user: state.user,\n    project: state.currentProject\n})\n*/\n\nexport default connect()(withRouter(TaskBoardView));\n//export default connect(mapStateToProps)(withRouter(TaskBoardView));"]},"metadata":{},"sourceType":"module"}