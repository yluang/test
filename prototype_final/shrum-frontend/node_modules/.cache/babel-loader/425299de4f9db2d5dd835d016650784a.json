{"ast":null,"code":"export default class HttpService {\n  static extractUser(token) {\n    let base64Url = token.split(\".\")[1];\n    let base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n    let userJson = JSON.parse(window.atob(base64));\n    return {\n      user: {\n        _id: userJson._id,\n        username: userJson.username,\n        role: userJson.role\n      }\n    };\n  }\n\n  static async get(url, onSuccess, onError) {\n    let token = window.localStorage[\"jwtToken\"];\n    let header = new Headers();\n\n    if (token) {\n      header.append(\"Authorization\", `JWT ${token}`);\n    }\n\n    try {\n      let resp = await fetch(url, {\n        method: \"GET\",\n        headers: header\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = \"/login\";\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        if (resp.hasOwnProperty(\"token\")) {\n          window.localStorage[\"jwtToken\"] = resp.token;\n          resp.user = this.extractUser(resp.token);\n        }\n\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static async put(url, data, onSuccess, onError) {\n    let token = window.localStorage[\"jwtToken\"];\n    let header = new Headers();\n\n    if (token) {\n      header.append(\"Authorization\", `JWT ${token}`);\n    }\n\n    header.append(\"Content-Type\", \"application/json\");\n\n    try {\n      let resp = await fetch(url, {\n        method: \"PUT\",\n        headers: header,\n        body: JSON.stringify(data)\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = \"/login\";\n        return;\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        if (resp.hasOwnProperty(\"token\")) {\n          window.localStorage[\"jwtToken\"] = resp.token;\n          resp.user = this.extractUser(resp.token);\n        }\n\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static async post(url, data, onSuccess, onError) {\n    let token = window.localStorage[\"jwtToken\"];\n    let header = new Headers();\n\n    if (token) {\n      header.append(\"Authorization\", `JWT ${token}`);\n    }\n\n    header.append(\"Content-Type\", \"application/json\");\n\n    try {\n      let resp = await fetch(url, {\n        method: \"POST\",\n        headers: header,\n        body: JSON.stringify(data)\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = \"/login\";\n        return;\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        if (resp.hasOwnProperty(\"token\")) {\n          window.localStorage[\"jwtToken\"] = resp.token;\n          resp.user = this.extractUser(resp.token);\n        }\n\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static async remove(url, onSuccess, onError) {\n    let token = window.localStorage[\"jwtToken\"];\n    let header = new Headers();\n\n    if (token) {\n      header.append(\"Authorization\", `JWT ${token}`);\n    }\n\n    try {\n      let resp = await fetch(url, {\n        method: \"DELETE\",\n        headers: header\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = \"/login\";\n        return;\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static checkIfUnauthorized(res) {\n    if (res.status === 401) {\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/services/HttpService.js"],"names":["HttpService","extractUser","token","base64Url","split","base64","replace","userJson","JSON","parse","window","atob","user","_id","username","role","get","url","onSuccess","onError","localStorage","header","Headers","append","resp","fetch","method","headers","checkIfUnauthorized","location","json","error","hasOwnProperty","err","message","put","data","body","stringify","post","remove","res","status"],"mappings":"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","sourcesContent":["export default class HttpService {\n    static extractUser(token) {\n        let base64Url = token.split(\".\")[1];\n        let base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n        let userJson = JSON.parse(window.atob(base64));\n        return {\n            user: {\n                _id: userJson._id,\n                username: userJson.username,\n                role: userJson.role,\n            },\n        };\n    }\n\n    static async get(url, onSuccess, onError) {\n        let token = window.localStorage[\"jwtToken\"];\n        let header = new Headers();\n        if (token) {\n            header.append(\"Authorization\", `JWT ${token}`);\n        }\n\n        try {\n            let resp = await fetch(url, {\n                method: \"GET\",\n                headers: header,\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = \"/login\";\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                if (resp.hasOwnProperty(\"token\")) {\n                    window.localStorage[\"jwtToken\"] = resp.token;\n                    resp.user = this.extractUser(resp.token);\n                }\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static async put(url, data, onSuccess, onError) {\n        let token = window.localStorage[\"jwtToken\"];\n        let header = new Headers();\n        if (token) {\n            header.append(\"Authorization\", `JWT ${token}`);\n        }\n        header.append(\"Content-Type\", \"application/json\");\n\n        try {\n            let resp = await fetch(url, {\n                method: \"PUT\",\n                headers: header,\n                body: JSON.stringify(data),\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = \"/login\";\n                return;\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                if (resp.hasOwnProperty(\"token\")) {\n                    window.localStorage[\"jwtToken\"] = resp.token;\n                    resp.user = this.extractUser(resp.token);\n                }\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static async post(url, data, onSuccess, onError) {\n        let token = window.localStorage[\"jwtToken\"];\n        let header = new Headers();\n        if (token) {\n            header.append(\"Authorization\", `JWT ${token}`);\n        }\n        header.append(\"Content-Type\", \"application/json\");\n\n        try {\n            let resp = await fetch(url, {\n                method: \"POST\",\n                headers: header,\n                body: JSON.stringify(data),\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = \"/login\";\n                return;\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                if (resp.hasOwnProperty(\"token\")) {\n                    window.localStorage[\"jwtToken\"] = resp.token;\n                    resp.user = this.extractUser(resp.token);\n                }\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static async remove(url, onSuccess, onError) {\n        let token = window.localStorage[\"jwtToken\"];\n        let header = new Headers();\n        if (token) {\n            header.append(\"Authorization\", `JWT ${token}`);\n        }\n\n        try {\n            let resp = await fetch(url, {\n                method: \"DELETE\",\n                headers: header,\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = \"/login\";\n                return;\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static checkIfUnauthorized(res) {\n        if (res.status === 401) {\n            return true;\n        }\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}