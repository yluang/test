{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum_new/prototype_final/shrum-frontend/src/components/TaskListComponent.js\";\n// import React, { useEffect } from \"react\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import {\n//     Button,\n//     Divider,\n//     Paper,\n//     Table,\n//     TableBody,\n//     TableCell,\n//     TableContainer,\n//     TableHead,\n//     TableRow,\n//     Typography,\n//     TableSortLabel,\n//     TablePagination,\n// } from \"@material-ui/core\";\n// import TaskListEntry from \"./TaskListEntry\";\n// const useStyles = makeStyles((theme) => ({\n//     movieListRoot: {\n//         padding: theme.spacing(2),\n//         flex: 1,\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         alignItems: \"center\",\n//     },\n//     movieListHeader: {\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         justifyContent: \"center\",\n//         paddingTop: theme.spacing(2),\n//         paddingBottom: theme.spacing(2),\n//         maxWidth: \"1000px\",\n//     },\n//     headerDivider: {\n//         margin: theme.spacing(2),\n//     },\n//     addMovieButton: {\n//         margin: theme.spacing(2),\n//     },\n//     taskListPaper: {\n//         width: \"1000px\",\n//     },\n//     image: {\n//         borderRadius: theme.shape.borderRadius,\n//         boxShadow: theme.shadows[2],\n//     },\n// }));\n// /**\n//  * Comparator for two objects on a generic property\n//  * @param {compare object a} a\n//  * @param {compare object b} b\n//  * @param {order by property name} orderBy\n//  * @returns 1 when b > a, -1 when a < b\n//  */\n//  function descendingComparator(a, b, orderBy) {\n//     if (b[orderBy] < a[orderBy]) {\n//         return -1;\n//     }\n//     if (b[orderBy] > a[orderBy]) {\n//         return 1;\n//     }\n//     return 0;\n// }\n// /**\n//  * Get comparator for sorting table\n//  * @param {asc or desc} order\n//  * @param {order by propoerty name} orderBy\n//  * @returns function that compares two objects\n//  */\n// function getComparator(order, orderBy) {\n//     return order === \"desc\"\n//         ? (a, b) => descendingComparator(a, b, orderBy)\n//         : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// /**\n//  * Sort array with respect to the initial order of the objects\n//  * @param {to sort array} array\n//  * @param {comparator for sorting} comparator\n//  * @returns sorted array\n//  */\n// function stableSort(array, comparator) {\n//     // include index into the to sortable array objects\n//     const stabilizedThis = array.map((el, index) => [el, index]);\n//     // sort the array\n//     stabilizedThis.sort((a, b) => {\n//         // compare two array objects a[0] or b[0] refer to the original element of the list a[1] or b[1] would be the initial index\n//         const order = comparator(a[0], b[0]);\n//         if (order !== 0) return order;\n//         // if both objects have the same property value in the order by property, their initial order in the array is maintained\n//         return a[1] - b[1];\n//     });\n//     return stabilizedThis.map((el) => el[0]);\n// }\n// function TaskListComponent(props) {\n//     const classes = useStyles();\n//     const [orderBy, setOrderBy] = React.useState();\n//     const [order, setOrder] = React.useState();\n//     const onRequestSort = (cellId, event) => {\n//         // if the current orderBy is also the clicked property then the direction of the sorting should be changed\n//         // otherwise the fist order direction is always ascending\n//         const isAsc = orderBy === cellId && order === \"asc\";\n//         setOrder(isAsc ? \"desc\" : \"asc\");\n//         // setting the called cell id as order by\n//         setOrderBy(cellId);\n//     };\n//     return (\n//         <div>\n//             <h2>Shrum Task List</h2>\n//             <Paper className={classes.taskListPaper}>\n//                 <TableContainer>\n//                     <Table>\n//                         <TableHead>\n//                             <TableRow>\n//                                 <TableCell width=\"20%\">Title</TableCell>\n//                                 <TableCell align=\"left\">Description</TableCell>\n//                                 { /*sortableHeadCells.map((headCell, index) => (\n//                                     <SortableTableHeadCell\n//                                         key={index}\n//                                         order={order}\n//                                         orderBy={orderBy}\n//                                         headCell={headCell}\n//                                         onRequestSort={() =>\n//                                             onRequestSort(headCell.id)\n//                                         }\n//                                         width={headCell.width}\n//                                     />\n//                                 ))}\n//                                 {/*\n//                                 props.isAdmin ? (\n//                                     <TableCell align=\"center\">Delete</TableCell>\n//                                 ) : null\n//                                 */}\n//                             </TableRow>\n//                         </TableHead>\n//                         <TableBody>\n//                             {props.tasks\n//                                 .map((task, index) => {\n//                                     return (\n//                                         <TaskListEntry\n//                                             key={index}\n//                                             task={task}\n//                                             onClickDisplayTask={\n//                                                 props.onClickDisplayTask\n//                                             }\n//                                         />\n//                                     );\n//                                 })}\n//                         </TableBody>\n//                     </Table>\n//                 </TableContainer>\n//             </Paper>\n//         </div> \n//     ); \n// }\n// export default TaskListComponent;\nimport React from 'react';\n\nfunction TaskListComponent() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TaskListComponent;\nexport default TaskListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskListComponent\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum_new/prototype_final/shrum-frontend/src/components/TaskListComponent.js"],"names":["React","TaskListComponent"],"mappings":";;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,iBAAT,GAA6B;AACzB,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KANQA,iB;AAQT,eAAeA,iBAAf","sourcesContent":["// import React, { useEffect } from \"react\";\n\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import {\n//     Button,\n//     Divider,\n//     Paper,\n//     Table,\n//     TableBody,\n//     TableCell,\n//     TableContainer,\n//     TableHead,\n//     TableRow,\n//     Typography,\n//     TableSortLabel,\n//     TablePagination,\n// } from \"@material-ui/core\";\n\n// import TaskListEntry from \"./TaskListEntry\";\n\n\n// const useStyles = makeStyles((theme) => ({\n//     movieListRoot: {\n//         padding: theme.spacing(2),\n//         flex: 1,\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         alignItems: \"center\",\n//     },\n//     movieListHeader: {\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         justifyContent: \"center\",\n//         paddingTop: theme.spacing(2),\n//         paddingBottom: theme.spacing(2),\n//         maxWidth: \"1000px\",\n//     },\n//     headerDivider: {\n//         margin: theme.spacing(2),\n//     },\n//     addMovieButton: {\n//         margin: theme.spacing(2),\n//     },\n//     taskListPaper: {\n//         width: \"1000px\",\n//     },\n//     image: {\n//         borderRadius: theme.shape.borderRadius,\n//         boxShadow: theme.shadows[2],\n//     },\n// }));\n\n\n// /**\n//  * Comparator for two objects on a generic property\n//  * @param {compare object a} a\n//  * @param {compare object b} b\n//  * @param {order by property name} orderBy\n//  * @returns 1 when b > a, -1 when a < b\n//  */\n//  function descendingComparator(a, b, orderBy) {\n//     if (b[orderBy] < a[orderBy]) {\n//         return -1;\n//     }\n//     if (b[orderBy] > a[orderBy]) {\n//         return 1;\n//     }\n//     return 0;\n// }\n\n// /**\n//  * Get comparator for sorting table\n//  * @param {asc or desc} order\n//  * @param {order by propoerty name} orderBy\n//  * @returns function that compares two objects\n//  */\n// function getComparator(order, orderBy) {\n//     return order === \"desc\"\n//         ? (a, b) => descendingComparator(a, b, orderBy)\n//         : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n\n// /**\n//  * Sort array with respect to the initial order of the objects\n//  * @param {to sort array} array\n//  * @param {comparator for sorting} comparator\n//  * @returns sorted array\n//  */\n// function stableSort(array, comparator) {\n//     // include index into the to sortable array objects\n//     const stabilizedThis = array.map((el, index) => [el, index]);\n//     // sort the array\n//     stabilizedThis.sort((a, b) => {\n//         // compare two array objects a[0] or b[0] refer to the original element of the list a[1] or b[1] would be the initial index\n//         const order = comparator(a[0], b[0]);\n//         if (order !== 0) return order;\n//         // if both objects have the same property value in the order by property, their initial order in the array is maintained\n//         return a[1] - b[1];\n//     });\n//     return stabilizedThis.map((el) => el[0]);\n// }\n\n\n\n// function TaskListComponent(props) {\n//     const classes = useStyles();\n\n//     const [orderBy, setOrderBy] = React.useState();\n//     const [order, setOrder] = React.useState();\n\n//     const onRequestSort = (cellId, event) => {\n//         // if the current orderBy is also the clicked property then the direction of the sorting should be changed\n//         // otherwise the fist order direction is always ascending\n//         const isAsc = orderBy === cellId && order === \"asc\";\n//         setOrder(isAsc ? \"desc\" : \"asc\");\n\n//         // setting the called cell id as order by\n//         setOrderBy(cellId);\n//     };\n\n//     return (\n//         <div>\n//             <h2>Shrum Task List</h2>\n//             <Paper className={classes.taskListPaper}>\n//                 <TableContainer>\n//                     <Table>\n//                         <TableHead>\n//                             <TableRow>\n//                                 <TableCell width=\"20%\">Title</TableCell>\n//                                 <TableCell align=\"left\">Description</TableCell>\n//                                 { /*sortableHeadCells.map((headCell, index) => (\n//                                     <SortableTableHeadCell\n//                                         key={index}\n//                                         order={order}\n//                                         orderBy={orderBy}\n//                                         headCell={headCell}\n//                                         onRequestSort={() =>\n//                                             onRequestSort(headCell.id)\n//                                         }\n//                                         width={headCell.width}\n//                                     />\n//                                 ))}\n//                                 {/*\n//                                 props.isAdmin ? (\n//                                     <TableCell align=\"center\">Delete</TableCell>\n//                                 ) : null\n//                                 */}\n//                             </TableRow>\n//                         </TableHead>\n//                         <TableBody>\n//                             {props.tasks\n//                                 .map((task, index) => {\n//                                     return (\n//                                         <TaskListEntry\n//                                             key={index}\n//                                             task={task}\n//                                             onClickDisplayTask={\n//                                                 props.onClickDisplayTask\n//                                             }\n                                            \n//                                         />\n//                                     );\n//                                 })}\n//                         </TableBody>\n//                     </Table>\n//                 </TableContainer>\n//             </Paper>\n//         </div> \n//     ); \n// }\n\n// export default TaskListComponent;\nimport React from 'react'\n\nfunction TaskListComponent() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default TaskListComponent\n"]},"metadata":{},"sourceType":"module"}