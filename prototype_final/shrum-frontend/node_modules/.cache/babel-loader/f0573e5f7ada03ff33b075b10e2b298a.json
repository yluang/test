{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/components/MovieCast.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { IconButton, Table, TableBody, TableCell, TableContainer, TableRow } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport CustomTextField from \"../components/CustomTextField\";\nimport { Add, Delete, Edit } from \"@material-ui/icons\";\n/**\n * For presenting and changing movie cast information\n * @param {props} props\n */\n\nfunction MovieCast(props) {\n  _s();\n\n  const [newActorName, setNewActorName] = React.useState(\"\");\n  const [newActorCharacter, setNewActorCharacter] = React.useState(\"\"); // on click on add cast member\n\n  const onAddCastMember = () => {\n    if (newActorName === \"\") {\n      return;\n    }\n\n    let newActor = {\n      name: newActorName\n    };\n\n    if (newActorCharacter !== \"\") {\n      newActor.characters = [newActorCharacter];\n    }\n\n    props.onAddCastMember(newActor);\n    setNewActorName(\"\");\n    setNewActorCharacter(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: [props.movieCast && props.movieCast !== 0 ? props.movieCast.map((actor, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n              value: actor.name,\n              isEmptyText: \"Actor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 35\n          }, this), actor.characters && Array.isArray(actor.characters) ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"as\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n                value: actor.characters[0],\n                isEmptyText: \"a Role\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 39\n          }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 39\n          }, this), props.isAdmin ? /*#__PURE__*/_jsxDEV(TableCell, {\n            children: props.editMode ? /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: () => props.onRemoveCastMember(index),\n              children: /*#__PURE__*/_jsxDEV(Delete, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 47\n            }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: props.toggleEditMode,\n              disabled: !props.isLoggedIn,\n              children: /*#__PURE__*/_jsxDEV(Edit, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 39\n          }, this) : null]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 31\n        }, this)) : null, props.editMode ? /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n              value: newActorName,\n              editMode: props.editMode,\n              onChange: value => setNewActorName(value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"as\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(CustomTextField, {\n              value: newActorCharacter,\n              editMode: props.editMode,\n              onChange: value => setNewActorCharacter(value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              size: \"small\",\n              onClick: onAddCastMember,\n              children: /*#__PURE__*/_jsxDEV(Add, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n} // attributes of props and their type\n\n\n_s(MovieCast, \"qug8jQIqHsF0IH18BPmSgdKDz/0=\");\n\n_c = MovieCast;\nMovieCast.propTypes = {\n  movieCast: PropTypes.array,\n  editMode: PropTypes.bool,\n  onAddCastMember: PropTypes.func.isRequired,\n  onRemoveCastMember: PropTypes.func.isRequired,\n  isLoggedIn: PropTypes.bool,\n  toggleEditMode: PropTypes.func.isRequired\n};\nexport default MovieCast;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCast\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/components/MovieCast.js"],"names":["React","IconButton","Table","TableBody","TableCell","TableContainer","TableRow","PropTypes","CustomTextField","Add","Delete","Edit","MovieCast","props","newActorName","setNewActorName","useState","newActorCharacter","setNewActorCharacter","onAddCastMember","newActor","name","characters","movieCast","map","actor","index","Array","isArray","isAdmin","editMode","onRemoveCastMember","toggleEditMode","isLoggedIn","value","propTypes","array","bool","func","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    IconButton,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableRow,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport CustomTextField from \"../components/CustomTextField\";\nimport { Add, Delete, Edit } from \"@material-ui/icons\";\n\n/**\n * For presenting and changing movie cast information\n * @param {props} props\n */\nfunction MovieCast(props) {\n    const [newActorName, setNewActorName] = React.useState(\"\");\n    const [newActorCharacter, setNewActorCharacter] = React.useState(\"\");\n\n    // on click on add cast member\n    const onAddCastMember = () => {\n        if (newActorName === \"\") {\n            return;\n        }\n        let newActor = { name: newActorName };\n        if (newActorCharacter !== \"\") {\n            newActor.characters = [newActorCharacter];\n        }\n        props.onAddCastMember(newActor);\n        setNewActorName(\"\");\n        setNewActorCharacter(\"\");\n    };\n\n    return (\n        <TableContainer>\n            <Table>\n                <TableBody>\n                    {/* showing the already added cast members  */}\n                    {props.movieCast && props.movieCast !== 0\n                        ? props.movieCast.map((actor, index) => (\n                              <TableRow key={index}>\n                                  <TableCell>\n                                      <CustomTextField\n                                          value={actor.name}\n                                          isEmptyText=\"Actor\"\n                                      />\n                                  </TableCell>\n                                  {actor.characters &&\n                                  Array.isArray(actor.characters) ? (\n                                      <React.Fragment>\n                                          <TableCell>as</TableCell>\n                                          <TableCell>\n                                              <CustomTextField\n                                                  value={actor.characters[0]}\n                                                  isEmptyText=\"a Role\"\n                                              />\n                                          </TableCell>\n                                      </React.Fragment>\n                                  ) : (\n                                      <React.Fragment>\n                                          <TableCell></TableCell>\n                                          <TableCell></TableCell>\n                                      </React.Fragment>\n                                  )}\n                                  {props.isAdmin ? (\n                                      <TableCell>\n                                          {props.editMode ? (\n                                              <IconButton\n                                                  size=\"small\"\n                                                  onClick={() =>\n                                                      props.onRemoveCastMember(\n                                                          index\n                                                      )\n                                                  }\n                                              >\n                                                  <Delete />\n                                              </IconButton>\n                                          ) : (\n                                              <IconButton\n                                                  size=\"small\"\n                                                  onClick={props.toggleEditMode}\n                                                  disabled={!props.isLoggedIn}\n                                              >\n                                                  <Edit />\n                                              </IconButton>\n                                          )}\n                                      </TableCell>\n                                  ) : null}\n                              </TableRow>\n                          ))\n                        : null}\n                    {/* give the opportunity to add a new cast member */}\n                    {props.editMode ? (\n                        <TableRow>\n                            <TableCell>\n                                <CustomTextField\n                                    value={newActorName}\n                                    editMode={props.editMode}\n                                    onChange={(value) => setNewActorName(value)}\n                                />\n                            </TableCell>\n                            <TableCell>as</TableCell>\n                            <TableCell>\n                                <CustomTextField\n                                    value={newActorCharacter}\n                                    editMode={props.editMode}\n                                    onChange={(value) =>\n                                        setNewActorCharacter(value)\n                                    }\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <IconButton\n                                    size=\"small\"\n                                    onClick={onAddCastMember}\n                                >\n                                    <Add />\n                                </IconButton>\n                            </TableCell>\n                        </TableRow>\n                    ) : null}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\n// attributes of props and their type\nMovieCast.propTypes = {\n    movieCast: PropTypes.array,\n    editMode: PropTypes.bool,\n    onAddCastMember: PropTypes.func.isRequired,\n    onRemoveCastMember: PropTypes.func.isRequired,\n    isLoggedIn: PropTypes.bool,\n    toggleEditMode: PropTypes.func.isRequired,\n};\n\nexport default MovieCast;\n"]},"metadata":{},"sourceType":"module"}