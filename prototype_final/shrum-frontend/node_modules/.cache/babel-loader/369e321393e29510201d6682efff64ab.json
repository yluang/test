{"ast":null,"code":"import TaskService from \"../../services/TaskService\";\n/**\n * Redux actions for data retrieval / editing\n * \n * \n * \n */\n\n/**\n * getTasks\n * @returns tasks: array of individual tasks \n * \n */\n\nexport function getTasks(projectId) {\n  function onSuccess(tasks) {\n    return {\n      type: \"GETTASKS_SUCCESS\",\n      tasks: tasks\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"Error: failed to retrieve tasks from server\");\n  }\n\n  return async dispatch => {\n    try {\n      let tasks = await TaskService.getTasks(projectId); // Dispatch task retrieval\n\n      dispatch(onSuccess(tasks));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function createTask(projectId, taskData) {\n  function onSuccess(response) {\n    return {\n      type: \"CREATETASK_SUCCESS\",\n      response: response\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"Error: failed to create new task\");\n  }\n\n  return async dispatch => {\n    try {\n      let response = await TaskService.createTask(projectId, taskData);\n      dispatch(onSuccess(response));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum_new/prototype_final/shrum/src/redux/actions/taskActions.js"],"names":["TaskService","getTasks","projectId","onSuccess","tasks","type","onFailure","error","console","log","dispatch","e","createTask","taskData","response"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAChC,WAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvB,WAAO;AAAEC,MAAAA,IAAI,EAAE,kBAAR;AAA4BD,MAAAA,KAAK,EAAEA;AAAnC,KAAP;AACH;;AAED,WAASE,SAAT,CAAoBC,KAApB,EAA2B;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACH;;AAED,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,UAAIN,KAAK,GAAG,MAAMJ,WAAW,CAACC,QAAZ,CAAqBC,SAArB,CAAlB,CADA,CAEA;;AACAQ,MAAAA,QAAQ,CAACP,SAAS,CAACC,KAAD,CAAV,CAAR;AACH,KAJD,CAIE,OAAMO,CAAN,EAAS;AACPL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GARD;AASH;AAED,OAAO,SAASC,UAAT,CAAoBV,SAApB,EAA+BW,QAA/B,EAAyC;AAC5C,WAASV,SAAT,CAAoBW,QAApB,EAA8B;AAC1B,WAAO;AAAET,MAAAA,IAAI,EAAE,oBAAR;AAA8BS,MAAAA,QAAQ,EAAEA;AAAxC,KAAP;AACH;;AAED,WAASR,SAAT,CAAoBC,KAApB,EAA2B;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;;AAED,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,UAAII,QAAQ,GAAG,MAAMd,WAAW,CAACY,UAAZ,CAAuBV,SAAvB,EAAkCW,QAAlC,CAArB;AAEAH,MAAAA,QAAQ,CAACP,SAAS,CAACW,QAAD,CAAV,CAAR;AACH,KAJD,CAIE,OAAMH,CAAN,EAAS;AACPL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GARD;AASH","sourcesContent":["import TaskService from \"../../services/TaskService\"\n\n/**\n * Redux actions for data retrieval / editing\n * \n * \n * \n */\n\n\n/**\n * getTasks\n * @returns tasks: array of individual tasks \n * \n */\nexport function getTasks(projectId) {\n    function onSuccess (tasks) {\n        return { type: \"GETTASKS_SUCCESS\", tasks: tasks}\n    }\n\n    function onFailure (error) {\n        console.log(\"Error: failed to retrieve tasks from server\");\n    }\n\n    return async (dispatch) => {\n        try {\n            let tasks = await TaskService.getTasks(projectId);\n            // Dispatch task retrieval\n            dispatch(onSuccess(tasks));\n        } catch(e) {\n            onFailure(e);\n        }\n    }\n}\n\nexport function createTask(projectId, taskData) {\n    function onSuccess (response) {\n        return { type: \"CREATETASK_SUCCESS\", response: response}\n    }\n\n    function onFailure (error) {\n        console.log(\"Error: failed to create new task\");\n    }\n\n    return async (dispatch) => {\n        try {\n            let response = await TaskService.createTask(projectId, taskData );\n\n            dispatch(onSuccess(response));\n        } catch(e) {\n            onFailure(e);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}