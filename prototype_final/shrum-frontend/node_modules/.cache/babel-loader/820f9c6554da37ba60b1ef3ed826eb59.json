{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/components/Item.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Window from \"./Window\";\nimport ITEM_TYPE from \"../data/types\";\n\nconst Item = ({\n  item,\n  index,\n  moveItem,\n  status\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: ITEM_TYPE,\n\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex == hoverIndex) {\n        return;\n      }\n\n      const hoveredRect = ref.current.getBoundClientRect();\n      const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n      const mousePosition = monitor.getClientOffset();\n      const hoverClientY = mousePosition.y - hoveredRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      moveItem(dragIndex, hoverIndex);\n      item.index = hover.index;\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ITEM_TYPE,\n      ...item,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [show, setShow] = useState(false);\n\n  const onopen = () => setShow(true);\n\n  const onClose = () => setShow(false);\n\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      style: {\n        opacity: isDragging ? 0 : 1\n      },\n      className: \"item\",\n      onClick: onOpen,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-bar\",\n        style: {\n          backgroundColor: status.color\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-title\",\n        children: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-status\",\n        children: item.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Window, {\n      item: item,\n      onClose: onClose,\n      show: show\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Item, \"LbeX16ANatyUFtbt0GxV0l2QxeM=\", false, function () {\n  return [useDrop, useDrag];\n});\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/components/Item.jsx"],"names":["React","Fragment","useState","useRef","useDrag","useDrop","Window","ITEM_TYPE","Item","item","index","moveItem","status","ref","drop","accept","hover","monitor","current","dragIndex","hoverIndex","hoveredRect","getBoundClientRect","hoverMiddleY","bottom","top","mousePosition","getClientOffset","hoverClientY","y","isDragging","drag","type","collect","show","setShow","onopen","onClose","opacity","onOpen","backgroundColor","color","content","icon"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useRef} from \"react\";\nimport {useDrag, useDrop} from \"react-dnd\";\nimport Window from \"./Window\";\nimport ITEM_TYPE from \"../data/types\";\n\nconst Item =({item, index, moveItem, status}) =>{\n    const ref = useRef(null);\n\n    const [, drop] = useDrop({\n        accept: ITEM_TYPE,\n        hover(item, monitor){\n            if(!ref.current){\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n\n            if(dragIndex == hoverIndex){\n                return;\n            }\n            const hoveredRect = ref.current.getBoundClientRect();\n            const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n            const mousePosition = monitor.getClientOffset();\n            const hoverClientY = mousePosition.y - hoveredRect.top;\n\n            if(dragIndex < hoverIndex && hoverClientY < hoverMiddleY){\n                return;\n            }\n\n            if(dragIndex > hoverIndex && hoverClientY < hoverMiddleY){\n                return;\n            }\n\n            moveItem(dragIndex, hoverIndex);\n            item.index = hover.index;\n        }\n    });\n        const [{isDragging}, drag] = useDrag({\n            item: {type: ITEM_TYPE, ...item, index},\n            collect: monitor => ({\n                isDragging: monitor.isDragging()\n            })\n        });\n\n        const [show, setShow] = useState(false);\n\n        const onopen = () => setShow(true);\n        const onClose =()=> setShow(false);\n        drag(drop(ref));\n\n        return(\n            <Fragment>\n                <div \n                    ref={ref}\n                    style={{opacity: isDragging ? 0:1}}\n                    className={\"item\"}\n                    onClick={onOpen}>\n                    <div className={\"color-bar\"} style={{backgroundColor: status.color}}></div>\n                    <p className={\"item-title\"}>{item.content}</p>\n                    <p className={\"item-status\"}>{item.icon}</p>\n\n\n                </div>\n                <Window\n                   item ={item}\n                   onClose={onClose}\n                   show={show} >\n                </Window>\n\n            </Fragment>\n        );\n        \n\n};\n\nexport default Item;"]},"metadata":{},"sourceType":"module"}