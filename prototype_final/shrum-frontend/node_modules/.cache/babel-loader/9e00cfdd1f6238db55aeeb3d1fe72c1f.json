{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/components/CustomTextField.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField } from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport TodayIcon from \"@material-ui/icons/Today\";\n/**\n * component for changing movie attributes at the same place where they are displayed\n * @param {props} props\n */\n\nfunction CustomTextField(props) {\n  _s();\n\n  // by moving the styles inside the functional component the props can influence the style\n  const useStyles = makeStyles(theme => ({\n    customtextfieldroot: {\n      minHeight: theme.mixins.textfieldminheight,\n      width: props.nofullwidth ? \"\" : \"100%\",\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    inputBase: {\n      padding: theme.spacing(1),\n      color: \"inherit !important\"\n    },\n    input: {\n      padding: theme.spacing(0),\n      textAlign: props.align ? props.align : \"left\",\n      fontSize: props.variant ? theme.typography[props.variant].fontSize : theme.typography.fontSize,\n      color: \"inherit\"\n    }\n  }));\n  const classes = useStyles();\n  const [value, setValue] = React.useState(props.value);\n  useEffect(() => {\n    setValue(props.value);\n  }, [props.value]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.customtextfieldroot,\n    children: (props.value === \"\" || !props.value || props.value === null) && !props.editMode ?\n    /*#__PURE__*/\n    // if no value is given return the given text\n    _jsxDEV(TextField, {\n      value: props.isEmptyText,\n      disabled: true,\n      variant: \"standard\",\n      InputProps: {\n        className: classes.inputBase,\n        disableUnderline: true\n      },\n      inputProps: {\n        className: classes.input\n      },\n      ...props.furtherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this) : props.type !== \"date\" ?\n    /*#__PURE__*/\n    // return a standard textfield\n    _jsxDEV(TextField, {\n      value: props.editMode ? value : props.value + (props.suffix ? \" \" + props.suffix : \"\"),\n      onChange: e => setValue(e.target.value),\n      onBlur: e => props.onChange ? props.onChange(e.target.value) : null,\n      disabled: !props.editMode,\n      variant: props.editMode ? \"outlined\" : \"standard\",\n      InputProps: props.editMode ? {\n        className: classes.inputBase\n      } : {\n        className: classes.inputBase,\n        disableUnderline: true\n      },\n      inputProps: {\n        className: classes.input\n      },\n      ...props.furtherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // if the field has a value and the type is date return a datepicker\n    _jsxDEV(MuiPickersUtilsProvider, {\n      utils: DateFnsUtils,\n      children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n        format: \"dd.MM.yyyy\",\n        value: props.value,\n        readOnly: !props.editMode,\n        keyboardIcon: props.editMode ? /*#__PURE__*/_jsxDEV(TodayIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 56\n        }, this) : null,\n        variant: props.editMode ? \"outlined\" : \"standard\",\n        InputProps: {\n          className: classes.inputBase,\n          disableUnderline: true\n        },\n        inputProps: {\n          className: classes.input\n        },\n        ...props.furtherProps,\n        onChange: date => props.onChange ? props.onChange(date) : null,\n        invalidDateMessage: \"\",\n        KeyboardButtonProps: {\n          \"aria-label\": \"change date\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n} // attributes of props and their type\n\n\n_s(CustomTextField, \"EDmjf0YY42cJE4uCQXv8Rfm1VHI=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomTextField;\nCustomTextField.propTypes = {\n  align: PropTypes.string,\n  variant: PropTypes.string,\n  editMode: PropTypes.bool,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  furtherProps: PropTypes.any\n};\nexport default CustomTextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomTextField\");","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum/prototype/shrum-frontend/src/components/CustomTextField.js"],"names":["React","useEffect","PropTypes","makeStyles","TextField","DateFnsUtils","MuiPickersUtilsProvider","KeyboardDatePicker","TodayIcon","CustomTextField","props","useStyles","theme","customtextfieldroot","minHeight","mixins","textfieldminheight","width","nofullwidth","display","alignItems","inputBase","padding","spacing","color","input","textAlign","align","fontSize","variant","typography","classes","value","setValue","useState","editMode","isEmptyText","className","disableUnderline","furtherProps","type","suffix","e","target","onChange","date","propTypes","string","bool","any","func"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TextField } from \"@material-ui/core\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport TodayIcon from \"@material-ui/icons/Today\";\n\n/**\n * component for changing movie attributes at the same place where they are displayed\n * @param {props} props\n */\nfunction CustomTextField(props) {\n    // by moving the styles inside the functional component the props can influence the style\n    const useStyles = makeStyles((theme) => ({\n        customtextfieldroot: {\n            minHeight: theme.mixins.textfieldminheight,\n            width: props.nofullwidth ? \"\" : \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n        },\n        inputBase: {\n            padding: theme.spacing(1),\n            color: \"inherit !important\",\n        },\n        input: {\n            padding: theme.spacing(0),\n            textAlign: props.align ? props.align : \"left\",\n            fontSize: props.variant\n                ? theme.typography[props.variant].fontSize\n                : theme.typography.fontSize,\n            color: \"inherit\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    const [value, setValue] = React.useState(props.value);\n\n    useEffect(() => {\n        setValue(props.value);\n    }, [props.value]);\n\n    return (\n        <div className={classes.customtextfieldroot}>\n            {(props.value === \"\" || !props.value || props.value === null) &&\n            !props.editMode ? (\n                // if no value is given return the given text\n                <TextField\n                    value={props.isEmptyText}\n                    disabled={true}\n                    variant=\"standard\"\n                    InputProps={{\n                        className: classes.inputBase,\n                        disableUnderline: true,\n                    }}\n                    inputProps={{\n                        className: classes.input,\n                    }}\n                    {...props.furtherProps}\n                />\n            ) : props.type !== \"date\" ? (\n                // return a standard textfield\n                <TextField\n                    value={\n                        props.editMode\n                            ? value\n                            : props.value +\n                              (props.suffix ? \" \" + props.suffix : \"\")\n                    }\n                    onChange={(e) => setValue(e.target.value)}\n                    onBlur={(e) =>\n                        props.onChange ? props.onChange(e.target.value) : null\n                    }\n                    disabled={!props.editMode}\n                    variant={props.editMode ? \"outlined\" : \"standard\"}\n                    InputProps={\n                        props.editMode\n                            ? {\n                                  className: classes.inputBase,\n                              }\n                            : {\n                                  className: classes.inputBase,\n                                  disableUnderline: true,\n                              }\n                    }\n                    inputProps={{\n                        className: classes.input,\n                    }}\n                    {...props.furtherProps}\n                />\n            ) : (\n                // if the field has a value and the type is date return a datepicker\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        format=\"dd.MM.yyyy\"\n                        value={props.value}\n                        readOnly={!props.editMode}\n                        keyboardIcon={props.editMode ? <TodayIcon /> : null}\n                        variant={props.editMode ? \"outlined\" : \"standard\"}\n                        InputProps={{\n                            className: classes.inputBase,\n                            disableUnderline: true,\n                        }}\n                        inputProps={{\n                            className: classes.input,\n                        }}\n                        {...props.furtherProps}\n                        onChange={(date) =>\n                            props.onChange ? props.onChange(date) : null\n                        }\n                        invalidDateMessage=\"\"\n                        KeyboardButtonProps={{\n                            \"aria-label\": \"change date\",\n                        }}\n                    />\n                </MuiPickersUtilsProvider>\n            )}\n        </div>\n    );\n}\n\n// attributes of props and their type\nCustomTextField.propTypes = {\n    align: PropTypes.string,\n    variant: PropTypes.string,\n    editMode: PropTypes.bool,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    furtherProps: PropTypes.any,\n};\n\nexport default CustomTextField;\n"]},"metadata":{},"sourceType":"module"}