{"ast":null,"code":"import MovieService from \"../../services/MovieService\";\nexport function getMovies() {\n  // when the backend call was successfull and the movies are retrieved\n  // in the dispatcher the movies will be added to the global state\n  function onSuccess(movies) {\n    return {\n      type: \"GETMOVIES_SUCCESS\",\n      movies: movies\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log(\"failed to get the movies\", error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the movies in the backend\n      let movies = await MovieService.getMovies(); // call onSuccess in context of redux\n\n      dispatch(onSuccess(movies));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function deleteMovie(id) {\n  function onSuccess(movies) {\n    return {\n      type: \"DELETEMOVIE_SUCCESS\",\n      movies: movies\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"delete movie failure\", error);\n  }\n\n  return async dispatch => {\n    try {\n      await MovieService.deleteMovie(id);\n      let movies = await MovieService.getMovies();\n      dispatch(onSuccess(movies));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function addMovie(movie) {\n  function onSuccess() {\n    return {\n      type: \"ADDMOVIE_SUCCESS\"\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"add movie failure\", error);\n  }\n\n  return async dispatch => {\n    try {\n      await MovieService.createMovie(movie);\n      dispatch(onSuccess());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function changeMovie(changedMovie) {\n  function onSuccess(movie) {\n    return {\n      type: \"UPDATEMOVIE_SUCCESS\",\n      movie: movie\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"change movie failure\", error);\n  }\n\n  return async dispatch => {\n    try {\n      let movie = await MovieService.updateMovie(changedMovie);\n      dispatch(onSuccess(movie));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport const getMovie = id => {\n  function onSuccess(movie) {\n    return {\n      type: \"GETMOVIE_SUCCESS\",\n      movie: movie\n    };\n  }\n\n  function onFailure(error) {\n    console.log(\"failed to load a movie\", error);\n  }\n\n  return async (dispatch, getState) => {\n    try {\n      let movie = await MovieService.getMovie(id);\n      dispatch(onSuccess(movie));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/huangyongli/workspace/Shrum_new/shrum/shrum-frontend/src/redux/actions/movieActions.js"],"names":["MovieService","getMovies","onSuccess","movies","type","onFailure","error","console","log","dispatch","e","deleteMovie","id","addMovie","movie","createMovie","changeMovie","changedMovie","updateMovie","getMovie","getState"],"mappings":"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","sourcesContent":["import MovieService from \"../../services/MovieService\";\n\nexport function getMovies() {\n    // when the backend call was successfull and the movies are retrieved\n    // in the dispatcher the movies will be added to the global state\n    function onSuccess(movies) {\n        return { type: \"GETMOVIES_SUCCESS\", movies: movies };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log(\"failed to get the movies\", error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the movies in the backend\n            let movies = await MovieService.getMovies();\n            // call onSuccess in context of redux\n            dispatch(onSuccess(movies));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function deleteMovie(id) {\n    function onSuccess(movies) {\n        return { type: \"DELETEMOVIE_SUCCESS\", movies: movies };\n    }\n    function onFailure(error) {\n        console.log(\"delete movie failure\", error);\n    }\n\n    return async (dispatch) => {\n        try {\n            await MovieService.deleteMovie(id);\n            let movies = await MovieService.getMovies();\n            dispatch(onSuccess(movies));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function addMovie(movie) {\n    function onSuccess() {\n        return { type: \"ADDMOVIE_SUCCESS\" };\n    }\n    function onFailure(error) {\n        console.log(\"add movie failure\", error);\n    }\n\n    return async (dispatch) => {\n        try {\n            await MovieService.createMovie(movie);\n            dispatch(onSuccess());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function changeMovie(changedMovie) {\n    function onSuccess(movie) {\n        return { type: \"UPDATEMOVIE_SUCCESS\", movie: movie };\n    }\n\n    function onFailure(error) {\n        console.log(\"change movie failure\", error);\n    }\n\n    return async (dispatch) => {\n        try {\n            let movie = await MovieService.updateMovie(changedMovie);\n            dispatch(onSuccess(movie));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport const getMovie = (id) => {\n    function onSuccess(movie) {\n        return { type: \"GETMOVIE_SUCCESS\", movie: movie };\n    }\n    function onFailure(error) {\n        console.log(\"failed to load a movie\", error);\n    }\n\n    return async (dispatch, getState) => {\n        try {\n            let movie = await MovieService.getMovie(id);\n            dispatch(onSuccess(movie));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}